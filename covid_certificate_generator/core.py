# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['PDF', 'PDFGenerator']

# Cell
import datetime
import pandas as pd
from fpdf import FPDF

# Cell



# Cell


class PDF(FPDF):
    pdf_w=210
    pdf_h=297
    margin_left = 20
    def escape(self, texte):
        return texte.encode('latin-1', 'replace').decode('latin-1')

    def lines(self):
        self.set_fill_color(32.0, 47.0, 250.0) # color for outer rectangle
        self.rect(5.0, 5.0, 200.0,287.0,'DF')
        self.set_fill_color(255, 255, 255) # color for inner rectangle
        self.rect(8.0, 8.0, 194.0,282.0,'FD')

    def imagex(self):
        self.set_xy(6.0,6.0)
        self.image(sctplt,  link='', type='', w=1586/80, h=1920/80)
        self.set_xy(183.0,6.0)
        self.image(sctplt2,  link='', type='', w=1586/80, h=1920/80)

    def titles(self):
        self.set_xy(0.0,0.0)
        self.set_font('Arial', 'B', 16)
        self.set_text_color(0, 0, 0)
        self.cell(w=210.0, h=40.0, align='C', txt=self.escape("JUSTIFICATIF DE DÉPLACEMENT SCOLAIRE"), border=0)

    def texte_parent(self, prenom_parent, nom_parent):
        self.set_xy(0.0,0.0)
        self.set_font('Arial', 'B', 10)
        self.set_text_color(0, 0, 0)
        texte = self.escape("En application des mesures générales nécessaires pour faire face à l'épidémie de covid-19")
        self.cell(w=self.pdf_w, h=80, align='C', txt=texte, border=0)
        self.set_xy(0.0,0.0)
        texte = self.escape("dans le cadre de l’état d’urgence sanitaire.")

        self.set_xy(self.margin_left,0.0)
        self.cell(w=10, h=110.0, align='L', txt=self.escape("Je soussigné(e),"), border=0)
        texte = self.escape("Nom et prénom des parents, ou responsable de l'enfant dument identifié  :  ")
        self.cell(w=50, h=120, align='L', txt=texte, border=0)
        texte = self.escape(f"\t {prenom_parent} {nom_parent}")
        self.set_xy(self.margin_left*2,0.0)
        self.cell(w=0, h=130, align='L', txt=texte, border=0)

    def texte_enfant(self, prenom_enfant, nom_enfant, date_naissance, moyen):
        self.set_xy(self.margin_left, 130.0)
        self.set_font('Arial', 'B', 10)
        self.set_text_color(0, 0, 0)
        texte = self.escape("certifie le caractère indispensable de mes déplacements, entre mon domicile et le lieu d'accueil de l'enfant :")
        self.cell(w=0, h=0, align='L', txt=texte, border=0)
        self.set_xy(self.margin_left,140)
        texte = self.escape(f"Nom : {nom_enfant}")
        self.cell(w=0, h=0, align='L', txt=texte, border=0)
        self.set_xy(self.margin_left,150)
        texte = self.escape(f"Prénom : {prenom_enfant}")
        self.cell(w=0, h=0, align='L', txt=texte, border=0)
        self.set_xy(self.margin_left,160)
        texte = self.escape(f"Date de naissance : {date_naissance}")
        self.cell(w=0, h=0, align='L', txt=texte, border=0)
        self.set_xy(self.margin_left,165)
        texte = self.escape(f"Moyen de déplacement : {moyen}")
        self.cell(w=0, h=0, align='L', txt=texte, border=0)

    def texte_etablissement(self, nom_etap, adresse_etab, cachet, ville):
        top = 180
        self.set_xy(self.margin_left,top)
        texte = self.escape(f"Nom de l'établissement : {nom_etap}")
        self.cell(w=0, h=0, align='L', txt=texte, border=0)
        self.set_xy(self.margin_left,top+10)
        texte = self.escape(f"Adresse de l'établissement : {adresse_etab}")
        self.cell(w=0, h=0, align='L', txt=texte, border=0)
        self.set_xy(self.margin_left,top+20)
        texte = self.escape(f"Fait à : {ville}")
        self.cell(w=0, h=0, align='L', txt=texte, border=0)
        self.set_xy(self.margin_left,top+30)
        texte = self.escape(f"Le : {datetime.datetime.today().strftime('%Y-%m-%d')}")
        self.cell(w=0, h=0, align='L', txt=texte, border=0)
        self.image(cachet, x=self.margin_left*2, y=top+50, w=100)

class PDFGenerator:
    config = None # Dict configuration
    school = None
    students_file = None
    pdf_w=210
    pdf_h=297

    def __init__(self, students_file, school, config_file=None):
        """
        Constructor
        :param config_file: str, Path to config file
        :return:
        """
        self.school = school
        self.students_file = students_file
        # Load config
#         with open(config_file) as json_data_file:
#             self.config = json.load(json_data_file)
        #self.conn = self.swift_con()



    #pdf.set_doc_option('core_fonts_encoding', 'utf-8')

    def generate_one_attestation(self, prenom_parent, nom_parent, prenom_enfant, nom_enfant, date_naissance, moyen):
        self.pdf.add_page()
        #pdf.lines()
        self.pdf.titles()
        self.pdf.texte_parent(prenom_parent, nom_parent)
        self.pdf.texte_enfant(prenom_enfant, nom_enfant,date_naissance, moyen)
        self.pdf.texte_etablissement(
            self.school['school_name'], self.school['school_adress'], self.school['school_sign'], self.school['city'])

    def generate(self, row):
        self.generate_one_attestation(row.PrenomParent, row.NomParent, row.PrenomEnfant, row.NomEnfant, row.DateNaissance, row.Moyen)


    def get_pdf(self, output_name):
        df = pd.read_csv(self.students_file)
        self.pdf = PDF(orientation='P', unit='mm', format='A4')
        self.pdf.set_author('Data For Good France')
        _ = df.apply(self.generate, axis=1)
        _ = self.pdf.output(output_name,'F')